import React from 'react';
import {StyleSheet, View, Text, Button, Keyboard, Alert, ImageBackground} from 'react-native';
import { TextInput, TouchableOpacity } from 'react-native-gesture-handler';
import PushNotification from 'react-native-push-notification';
import DateTimePickerModal from "react-native-modal-datetime-picker";
import {Picker} from '@react-native-community/picker';




export default class CreateReminder extends React.Component{
    constructor(){
        super()
        this.state = {
            isEventDateVisible: false,
            isReminderDateVisible:false,
            eventTitle: '',
            eventDescription: '',
            eventDate: '',
            reminderDate: '',
            repeatReminder: 'No',
        }
        PushNotification.createChannel(
            {
              channelId: "123", // (required)
              channelName: "Event_Reminders", // (required)
              
            }
          );

        PushNotification.configure({
            // (optional) Called when Token is generated (iOS and Android)
            onRegister: function (token) {
              console.log("TOKEN:", token);
            },
           
            // (required) Called when a remote is received or opened, or local notification is opened
            onNotification: function (notification) {
              console.log("NOTIFICATION:", notification);
           
              // process the notification
           
              // (required) Called when a remote is received or opened, or local notification is opened
            // notification.finish(PushNotificationIOS.FetchResult.NoData);
            },
           
            // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
            
           
            // IOS ONLY (optional): default: all - Permissions to register.
            permissions: {
              alert: true,
              badge: true,
              sound: true,
            },
           
            
            popInitialNotification: true,
        
            requestPermissions: Platform.OS === 'ios',
          });
        

    
      this.testNotification = this.testNotification.bind(this);
      this.scheduledNotification = this.scheduledNotification.bind(this);
     // this.cancelNotifications = this.cancelNotifications.bind(this);
     this.showEventDatePicker = this.showEventDatePicker.bind(this);
     this.showReminderDatePicker = this.showReminderDatePicker.bind(this);
     this.hideEventDatePicker = this.hideEventDatePicker.bind(this);
     this.hideReminderDatePicker = this.hideReminderDatePicker.bind(this);
     this.handleReminderDate = this.handleReminderDate.bind(this);
     this.handleEventDateConfirm = this.handleEventDateConfirm.bind(this);
     this.handleReminderDate = this.handleReminderDate.bind(this);
     this.handleEventTitle = this.handleEventTitle.bind(this);
     this.handleEventDescription = this.handleEventDescription.bind(this);
     //this.reminderSubmitMessage = this.reminderSubmitMessage.bind(this);
     this.reset = this.reset.bind(this);
     
     
     
    }

    showEventDatePicker(){
        this.setState({isEventDateVisible: true});
    }
    showReminderDatePicker(){
        this.setState({isReminderDateVisible: true});
    }
    hideEventDatePicker(){
        this.setState({isEventDateVisible: false});
    }

    hideReminderDatePicker(){
        this.setState({isReminderDateVisible: false});
    }
     handleEventDateConfirm(eDate){
       this.setState({eventDate: eDate});
      this.hideEventDatePicker();
     }

     handleReminderDate(rDate){
         this.setState({reminderDate: rDate});
         this.hideReminderDatePicker();
     }

     handleEventTitle(title){
      this.setState({eventTitle: title});
     }
     handleEventDescription(description){
         this.setState({eventDescription: description })
     }
    testNotification(){
        try{
    PushNotification.localNotification({
  /* iOS and Android properties */
  //id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  channelId:"123",
  title: "My Beautiful Reminder", // (optional)
  message: "This is a reminder being tested", // (required)
  
});   
        }catch(error) {
         Alert.alert("Fiill Required Fields", "All fields are required")
        }
        
    }

    myId = 0;
    scheduledNotification(){
        try{
        PushNotification.localNotificationSchedule({
            //... You can use all the options from localNotifications
            id: this.myId++,
            channelId:"123",
            title: this.state.eventTitle+" On: "+this.state.eventDate,
            message:this.state.eventDescription, // (required)
            date: this.state.reminderDate, 
            repeatType: this.state.repeatReminder,
            allowWhileIdle: true, // (optional) set notification to work while on doze, default: false
            playSound: true,
            soundName: "default"
            
          });
        }catch(error){
         Alert.alert("Error", "All fields must be filled");
        }
    }   

    cancelNotifications(){
        PushNotification.cancelAllLocalNotifications()
    }
   reminderSubmitMessage(){
       Alert.alert("Success", "Your Reminder has been successsfully scheduled");
   }
   reset(){
       this.setState({isEventDateVisible: false, isReminderDateVisible:false, eventTitle:'', eventDate: "", reminderDate: "", repeatReminder:"No ", eventDescription: ''})
   }
    
    
    render(){
        return(
            <>
            
           
        
        <View style= {styles.inputContainer}><TextInput style ={styles.input} placeholder ="ENTER EVENT TITLE" onChangeText ={this.handleEventTitle}  /></View>
            <View style ={styles.inputContainer}><TextInput style ={styles.input} placeholder = "EVENT DESCRIPTION" onChangeText = {this.handleEventDescription}/></View>
            
            <View style ={styles.inputContainer}>

                <View>
        <TextInput onBlur={Keyboard.dismiss} onFocus = {this.showEventDatePicker} style ={styles.input} placeholder = 'EVENT DATE AND TIME: DD-MM-YY-TT-MM'/>
        <View style={styles.datePickerTextStyle}><Text style ={styles.pickerTextFont}>{this.state.eventDate.toString()}</Text></View>
        
                </View >
            <DateTimePickerModal
                mode = "datetime"
                onConfirm = {this.handleEventDateConfirm}
                onCancel = {this.hideEventDatePicker}
                isVisible = {this.state.isEventDateVisible}
                /> 
            </View>
            <View style={styles.inputContainer}>

<View>
<TextInput onBlur={Keyboard.dismiss} onFocus = {this.showReminderDatePicker} style ={styles.input} placeholder = "DATE AND TIME TO RECEIVE REMINDERS: DD-MM-YY-TT-MM"/>
<View style={styles.datePickerTextStyle}><Text style={styles.pickerTextFont}>{this.state.reminderDate.toString()}</Text></View>
</View>
<DateTimePickerModal
mode = "datetime"
onConfirm = {this.handleReminderDate}
onCancel = {this.hideReminderDatePicker}
isVisible = {this.state.isReminderDateVisible}
/> 


</View>

<View style ={styles.input}>
<Picker
  mode ='dropdown'
  
  selectedValue={this.state.repeatReminder}
  
  style={{height: 30, width: 400 }}
  onValueChange={(itemValue, itemIndex) =>
    this.setState({repeatReminder: itemValue})
    
    
  }>
  <Picker.Item label="REPEAT REMINDER" value=" " />
  <Picker.Item label="NO" value= ""/> 
  <Picker.Item label="Hourly" value="hour" />
  <Picker.Item label="Daily" value="day" />
  <Picker.Item label="Weekly" value="week" />
  <Picker.Item label="Monthly" value="month" />
</Picker>
</View>
<ImageBackground source ={require('./ap-bg.jpg')} style={{width: '100%', height: '100%'}} >
            <View style = {styles.inputContainer, styles.buttonTopGap}>
            <TouchableOpacity
             style = {styles.buttonStyle} onPress={this.scheduledNotification} >
                <Text style ={styles.buttonText}>SCHEDULE REMINDERS</Text>
            </TouchableOpacity>
            
            </View>
            <View style = {styles.inputContainer}>
            <TouchableOpacity
             style = {styles.buttonStyle} onPress={this.reset}>
                <Text style ={styles.buttonText}>RESET</Text>
            </TouchableOpacity>
            
            </View>
            <View style = {styles.inputContainer}>
                <TouchableOpacity style ={styles.buttonStyle} onPress = {this.cancelNotifications} >
                    <Text style = {styles.buttonText}>CANCEL REMINDERS</Text>
                </TouchableOpacity>
            </View>
            </ImageBackground>
            
            </>
        )

    }




}

const styles = StyleSheet.create({
    buttonTopGap:{
        marginTop: 50
    },
    datePickerTextStyle:{
     marginStart: 20,

     includeFontPadding:true,
     fontSize: 15,
     fontWeight: 'bold'


    },
    pickerTextFont:{
     fontWeight: "bold"
    },

    inputContainer: {
        paddingTop: 5,
      },
    buttonStyle: {
        marginTop:5,
        borderWidth: 1,
        borderColor: '#007BFF',
        backgroundColor: 'orange',
        padding: 15,
      },
    buttonText:{
    color: '#ffffff',
    fontSize: 20,
    textAlign: 'center',
        
        
    },

    input: {
        borderColor: 'brown',
        borderWidth:2,
        borderRadius: 8,
        height: 40,
        fontSize: 13,
        fontWeight: "bold",
        paddingLeft: 20,
        paddingRight: 20,
      
    
    
    

    },
    topInputText:{
        marginTop: 10,
    }

})